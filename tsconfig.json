{
  "compilerOptions": {
    /* 基础编译配置 */
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": ["node", "jest"],

    /* 性能优化 */
    "skipLibCheck": true,

    /* 模块解析配置 */
    "moduleResolution": "bundler",             // 模块解析：bundler
    "esModuleInterop": true,                   // 允许 CommonJS 和 ES 模块互操作
    "allowSyntheticDefaultImports": true,      // 允许合成默认导入
    "forceConsistentCasingInFileNames": true,  // 强制文件名大小写一致
    "resolveJsonModule": true,                 // 允许导入 JSON 文件

    /* 严格类型检查 */
    "strict": true,                            // 启用所有严格类型检查
    "noUnusedLocals": true,                    // 禁止未使用的局部变量
    "noUnusedParameters": true,                // 禁止未使用的参数
    "noFallthroughCasesInSwitch": true,        // 防止 switch 语句意外 fallthrough
    "noImplicitReturns": true,                  // 禁止函数没有显式返回值
    "noImplicitOverride": true,                 // 禁止重写非重写的方法

    /* 输出配置 */
    "outDir": "./dist",                         // 编译输出目录 
    "rootDir": "./app",
    "declaration": true,                        // 生成 .d.ts 类型声明文件
    "declarationMap": true,                     // 生成声明文件的源码映射
    "sourceMap": true,                          // 生成源码映射文件，便于调试

    // /* JSX 配置 */
    // "jsx": "react-jsx",                    // JSX 处理方式：React 17+ 自动转换


    /* 高级配置 */
    "verbatimModuleSyntax": false,
    // "moduleDetection": "force",            // 强制所有文件被视为模块（不必要）
    "allowImportingTsExtensions": false,     // 允许导入 .ts/.tsx 扩展名（需要 noEmit: true）
    "noEmit": false                         // 不生成输出文件（构建工具模式）
  },
  "include": [
    "app/**/*"                              // 包含：app 目录下所有文件
  ],
  "exclude": [
    "node_modules",                        // 排除：node_modules 目录
    "dist",                                // 排除：dist 输出目录
    "**/*.test.ts",                        // 排除：所有 .test.ts 文件
    "**/*.test.tsx",                       // 排除：所有 .test.tsx 文件
    "**/*.spec.ts",                        // 排除：所有 .spec.ts 文件
    "**/*.spec.tsx"                        // 排除：所有 .spec.tsx 文件
  ],
  // "ts-node": {                          // 未使用 ts-node，可整体注释
  //   "esm": true
  // }
}
